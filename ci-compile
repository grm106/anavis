#!/usr/bin/env node

require('shelljs/global');

const fs = require('fs');
const path = require('path');
const gh = require('ghreleases');
const semver = require('semver');
const Dropbox = require('dropbox');
const pkg = require('./package.json');
const markdownEscape = require('markdown-escape');
const commitsBetween = require('commits-between');

const DROPBOX_TOKEN = process.env.DROPBOX_TOKEN;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_USER = process.env.GITHUB_USER;

// CI=true
// TRAVIS=true
// USER=travis (do not depend on this value)
// HOME=/Users/travis (do not depend on this value)
// Additionally, Travis CI sets environment variables you can use in your build, e.g. to tag the build, or to run post-build deployments.

// TRAVIS_BRANCH:For builds not triggered by a pull request this is the name of the branch currently being built; whereas for builds triggered by a pull request this is the name of the branch targeted by the pull request (in many cases this will be master).
// TRAVIS_BUILD_DIR: The absolute path to the directory where the repository being built has been copied on the worker.
// TRAVIS_BUILD_ID: The id of the current build that Travis CI uses internally.
// TRAVIS_BUILD_NUMBER: The number of the current build (for example, “4”).
// TRAVIS_COMMIT: The commit that the current build is testing.
// TRAVIS_COMMIT_RANGE: The range of commits that were included in the push or pull request. (Note that this is empty for builds triggered by the initial commit of a new branch.)
// TRAVIS_JOB_ID: The id of the current job that Travis CI uses internally.
// TRAVIS_JOB_NUMBER: The number of the current job (for example, “4.1”).
// TRAVIS_PULL_REQUEST: The pull request number if the current job is a pull request, “false” if it’s not a pull request.
// TRAVIS_SECURE_ENV_VARS: Whether or not secure environment vars are being used. This value is either “true” or “false”.
// TRAVIS_REPO_SLUG: The slug (in form: owner_name/repo_name) of the repository currently being built. (for example, “travis-ci/travis-build”).
// TRAVIS_OS_NAME: On multi-OS builds, this value indicates the platform the job is running on. Values are linux and osx currently, to be extended in the future.
// TRAVIS_TAG: If the current build is for a git tag, this variable is set to the tag’s name.

const isPullRequest = process.env.TRAVIS_PULL_REQUEST !== 'false';
const commitish = process.env.TRAVIS_COMMIT || null;
const tagName = process.env.TRAVIS_TAG || null;
const branchName = process.env.TRAVIS_BRANCH;
const isOsx = process.env.TRAVIS_OS_NAME === 'osx';
const buildVersion = pkg.version;
const mainVersion = [semver.major(buildVersion), semver.minor(buildVersion), semver.patch(buildVersion)].join('.');
const prerelease = semver.prerelease(buildVersion) || [];
const platformsToBuild = isOsx ? 'm' : 'lw';

const buildConfigName = prerelease[0] || 'stable';
const buildConfigFile = `./build/config.${buildConfigName}.json`;
const buildConfig = require(buildConfigFile);

const artifactNames = {
  linux: `${pkg.name}-${buildVersion}-linux-x86_64.AppImage`,
  win: `${pkg.name}-${buildVersion}-windows.exe`,
  osx: `${pkg.name}-${buildVersion}-osx.dmg`
};

const filesToUpload = isOsx ? [artifactNames.osx] : [artifactNames.win, artifactNames.linux];

console.log(`Using build configuration: ${buildConfigName}`);
console.log(`Build version: ${buildVersion}`);

const buildCommand = exec(`./node_modules/.bin/electron-builder -${platformsToBuild} -c ./build/config.${buildConfigFile}.json`);
if (buildCommand.code !== 0) {
  process.exit(buildCommand.code);
}

async function build() {
  await buildForPlatforms(platformsToBuild, buildConfigFile)
  await uploadArtifacts(filesToUpload);
}

build().catch(error => {
  console.error(error);
  process.exit(-1);
});

function buildForPlatforms(platforms, configFile) {
  const buildCommand = exec(`./node_modules/.bin/electron-builder -${platforms} -c ${configFile}`);
  if (buildCommand.code !== 0) {
    throw new Error(`Electron builder exited with code ${buildCommand.code}`);
  }
}

/// DROPBOX HELPERS //////////////////////////////////////////////////////////////////////////////

function uploadArtifacts(files) {
  return Promise.all(files.map(file => uploadToDropbox(path.resolve(`./dist/${file}`), `/${file}`)));
}

function uploadToDropbox(source, target) {
  console.log(`${source} -> ${target}`);
  const fileContent = fs.readFileSync(source);
  const dbx = new Dropbox({ accessToken: DROPBOX_TOKEN });
  return dbx.filesUpload({ path: target, contents: fileContent });
}
